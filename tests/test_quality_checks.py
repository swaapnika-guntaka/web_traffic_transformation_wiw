# test_quality_checks.py
import os
import sys
import pandas as pd
import unittest

from os.path import dirname
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.quality_checks import check_data_integrity, check_missing_values

"""
Disclaimer: 

These are some examples of data quality tests. Can be used using the Dataframe generated by the actual files.
But for the assertion of the tests, these tests will FAIL as they are now with the example data.
More quality tests can be built working with partners and stakeholders.

"""

class TestDataQualityChecks(unittest.TestCase):
    def setUp(self):
        # Create a sample DataFrame for testing
        self.sample_data = {'column1': [1, 2, 3],
                            'column2': [None, 5, 6]}
        self.expected_checksum = hash('Sample data checksum')

    def test_check_missing_values(self):
        # Test the missing values check
        df = pd.DataFrame(self.sample_data)
        missing_values = check_missing_values(df)
        self.assertEqual(missing_values, 1)

    def test_check_data_integrity(self):
        # Test the data integrity check
        df = pd.DataFrame(self.sample_data)
        is_data_integrity_valid = check_data_integrity(df, self.expected_checksum)
        self.assertTrue(is_data_integrity_valid)

if __name__ == '__main__':
    unittest.main()